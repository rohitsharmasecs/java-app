name: Java CI with Maven 

on:
  #push:
    #branches: [ "master" ]
  #pull_request:
    #branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Compile
      run: mvn clean install

    - name: Package
      run: mvn package
      
    - name: Unit Test
      run: mvn test
      
    - name: List current directory
      run: ls -la
      
    - name: target folder content
      run: |
        cd target
        ls -la
      
    - name: build & SonarQube analysis
      run: |
        mvn verify sonar:sonar -Dsonar.projectKey=testrepo1 -Dsonar.login=${{ secrets.SONAR_LOGIN_CRED }} -Dsonar.host.url=https://sonarcloud.io/
        sleep 30
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push apache image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: apache-reg
        IMAGE_TAG: apache_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f /home/runner/work/java-app/java-app/Apache/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 
    - name: Build, tag, and push tomcat image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tomcat-reg
        IMAGE_TAG: tomcat_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f /home/runner/work/java-app/java-app/Tomcat/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
    - name: Deploy apache to public instance
      uses: appleboy/ssh-action@master
      with:
        host: 52.90.189.128
        port: 22
        user: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
            sudo aws configure set access_key_id "${{ secrets.AWS_ACCESS_KEY }}"
            sudo aws configure set secret_access_key "${{ secrets.AWS_SECRET_KEY }}"
            sudo aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 323922828731.dkr.ecr.us-east-1.amazonaws.com
            sudo docker pull 323922828731.dkr.ecr.us-east-1.amazonaws.com/apache-reg:apache_image
            sudo docker run -i -t -d -p 80:80 323922828731.dkr.ecr.us-east-1.amazonaws.com/apache-reg:apache_image sh

    - name: deploy tomcat image to private ec2
      uses: appleboy/ssh-action@master
      with:
        host: 10.0.2.207
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        proxy_host: 52.90.189.128
        proxy_username: ubuntu
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_port: 22
        script: |
          sudo aws configure set access_key_id "${{ secrets.AWS_ACCESS_KEY }}"
          sudo aws configure set secret_access_key "${{ secrets.AWS_SECRET_KEY }}"
          sudo aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 323922828731.dkr.ecr.us-east-1.amazonaws.com
          sudo docker pull 323922828731.dkr.ecr.us-east-1.amazonaws.com/tomcat-reg:tomcat_image
          sudo docker run -i -t -d -p 80:80 323922828731.dkr.ecr.us-east-1.amazonaws.com/tomcat-reg:tomcat_image  
        
        
